# model aggregation yaparken loss değeri kullansak ? , az losslu olanın etkisi artsın?

# model aggregation yaparken model dağılımı daha iyi olanın daha yüksek katkısı olsun, 
# yüksek heterojen örneklerin katkısı olmasın


# clientlar initial prototypeları da göndersin
#1 -  sonrasında gelen prototypelara göre difference alalım ve onları kullanıp ne kadar öğreniyor kat sayısı çıkartalım 
#bu katsayıyı proto aggregationda kullanırız? -> çok örnek gören hızlı şekilde stabilleşir mi?


#PACtakinin benzerini prototype differenceslarına göre ayarlasak? Yakın olanlar birleşiğ gönderilsin clienta 

#Benim methodda da şu an data leak var en azından distribution leak ediyor

#baştan biraz beklenebilir , uygun konuma gelince ona göre bakarız


#2- prototype differencelarına göre yakın client bulup head aggregation? buna ek olarak modelde 


#3- Encoder - decoder yapısı olacak arada attention yapısı olacak 

attention weightlerini öğrenmeye çalışıcaz , çıkan weightleri genel ortalama alırken kullanıcaz
reconstructed olarak çıkan 






-- ilk olarak clientlardan gelen prototipler ile yakınlık hesaplama işi yapalım, 
    -- head aggregation yaparken yakın olanlar üstünden aggregation? (tüm prototypelar üzerinden distance gelecek)
        -- gelen distancelar kullanılarak weighted head hesaplanacak
    -- prototype differenceı kullanarak ne kadar image görmüştür tahmini?
        -- adamın prototype differencelarına göre weight ayarlayıp bir classlarına tahmini adet atayalım
        -- örneğin 10K image görmüş olsun classların prototype differences